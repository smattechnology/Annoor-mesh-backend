from time import sleep

import requests

access_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyNGY4NGE0YS0wZWE4LTQxY2ItOTRhYi0yZGIzNGRhNDE1YzQiLCJleHAiOjE3NTQzMDczNzJ9.gmPtsMwch1IU6JxhKaMUKaRU67oCm_QLijVhngRJYOQ"


def get_all_user():
    url = 'https://dummyjson.com/users?limit=100'
    post_url = "http://localhost:1024/auth/register"
    response = requests.get(url)

    if response.status_code != 200:
        print(f"Failed to fetch users: {response.status_code}")
        return

    data = response.json()

    for d in data["users"]:
        name = f"{d['firstName']} {d['maidenName']} {d['lastName']}"
        email = d["email"]
        username = d["username"]
        password = d["password"]
        role = d.get("role", "user")

        payload = {
            "email": email,
            "username": username,
            "name": name,
            "password": password,
            "role": role if role in ("admin", "user") else "user"
        }

        try:
            post_response = requests.post(post_url, json=payload)
            if post_response.status_code != 200:
                print(f"Failed to register: {post_response.status_code}")
                print(post_response.text)
                break
        except requests.RequestException as e:
            print(f"Request failed: {e}")
            break


def upload_category():
    post_url = "http://localhost:1024/product/add/category"
    access_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIyNGY4NGE0YS0wZWE4LTQxY2ItOTRhYi0yZGIzNGRhNDE1YzQiLCJleHAiOjE3NTQyMzY4OTh9.U3BPBnw-0ymSDLww4WLKxkQrsDUcO1tORDPnc3tGQ_8"
    cookies = {
        "access_token": access_token
    }
    categories = [
        {"value": "vegetables", "label": "‡¶∏‡¶¨‡¶ú‡¶ø (Vegetables)", "icon": "ü•¨"},
        {"value": "fruits", "label": "‡¶´‡¶≤ (Fruits)", "icon": "üçé"},
        {"value": "grains", "label": "‡¶ö‡¶æ‡¶≤ ‡¶ì ‡¶°‡¶æ‡¶≤ (Grains & Pulses)", "icon": "üåæ"},
        {"value": "dairy", "label": "‡¶¶‡ßÅ‡¶ó‡ßç‡¶ß‡¶ú‡¶æ‡¶§ (Dairy)", "icon": "ü•õ"},
        {"value": "meat", "label": "‡¶Æ‡¶æ‡¶Ç‡¶∏ ‡¶ì ‡¶Æ‡¶æ‡¶õ (Meat & Fish)", "icon": "üêü"},
        {"value": "spices", "label": "‡¶Æ‡¶∏‡¶≤‡¶æ (Spices)", "icon": "üå∂Ô∏è"},
        {"value": "snacks", "label": "‡¶®‡¶æ‡¶∏‡ßç‡¶§‡¶æ (Snacks)", "icon": "üç™"},
        {"value": "beverages", "label": "‡¶™‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º (Beverages)", "icon": "üßÉ"},
    ]

    success_count = 0
    fail_count = 0

    with requests.Session() as session:
        for i, category in enumerate(categories, 1):
            try:
                response = session.post(post_url, json=category, cookies=cookies)
                if response.status_code == 201:
                    print(f"[{i}/{len(categories)}] ‚úÖ Uploaded: {category['label']}")
                    success_count += 1
                elif response.status_code == 400 and "already exists" in response.text:
                    print(f"[{i}/{len(categories)}] ‚ö†Ô∏è Already exists: {category['label']}")
                else:
                    print(f"[{i}/{len(categories)}] ‚ùå Failed: {category['label']}, Status: {response.status_code}")
                    print(f"   ‚Üí Error: {response.text}")
                    fail_count += 1
                sleep(0.2)  # Optional delay to avoid flooding server
            except requests.exceptions.RequestException as e:
                print(f"[{i}/{len(categories)}] ‚ùó Exception for {category['label']}: {e}")
                fail_count += 1

    print("\nUpload Summary:")
    print(f"‚úÖ Success: {success_count}")
    print(f"‚ùå Failed: {fail_count}")


def upload_unite():
    post_url = "http://localhost:1024/product/add/unite"

    cookies = {
        "access_token": access_token
    }

    units = [
        {"value": "kilogram", "label": "‡¶ï‡ßá‡¶ú‡¶ø (Kg)", "icon": "‚öñÔ∏è"},
        {"value": "gram", "label": "‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ (g)", "icon": "‚öñÔ∏è"},
        {"value": "liter", "label": "‡¶≤‡¶ø‡¶ü‡¶æ‡¶∞ (L)", "icon": "ü•õ"},
        {"value": "milliliter", "label": "‡¶Æ‡¶ø‡¶≤‡¶ø‡¶≤‡¶ø‡¶ü‡¶æ‡¶∞ (ml)", "icon": "ü•õ"},
        {"value": "piece", "label": "‡¶™‡¶ø‡¶∏ (Pcs)", "icon": "üì¶"},
        {"value": "dozen", "label": "‡¶°‡¶ú‡¶® (Dozen)", "icon": "üì¶"},
        {"value": "bundle", "label": "‡¶¨‡¶æ‡¶®‡ßç‡¶°‡¶ø‡¶≤ (Bundle)", "icon": "üéã"},
        {"value": "packet", "label": "‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ü (Packet)", "icon": "üì¶"},
    ]

    success_count = 0
    fail_count = 0

    with requests.Session() as session:
        for i, unit in enumerate(units, 1):
            try:
                response = session.post(post_url, json=unit, cookies=cookies)
                if response.status_code == 201:
                    print(f"[{i}/{len(units)}] ‚úÖ Uploaded: {unit['label']}")
                    success_count += 1
                elif response.status_code == 400 and "already exists" in response.text:
                    print(f"[{i}/{len(units)}] ‚ö†Ô∏è Already exists: {unit['label']}")
                else:
                    print(f"[{i}/{len(units)}] ‚ùå Failed: {unit['label']}, Status: {response.status_code}")
                    print(f"   ‚Üí Error: {response.text}")
                    fail_count += 1
                sleep(0.2)
            except requests.exceptions.RequestException as e:
                print(f"[{i}/{len(units)}] ‚ùó Exception for {unit['label']}: {e}")
                fail_count += 1

    print("\nUpload Summary:")
    print(f"‚úÖ Success: {success_count}")
    print(f"‚ùå Failed: {fail_count}")


def upload_product():
    post_url = "http://localhost:1024/product/add/"

    cookies = {
        "access_token": access_token
    }

    products = [
        {
            "name": "‡¶∏‡¶Ø‡¶º‡¶æ‡¶¨‡¶ø‡¶® ‡¶§‡ßá‡¶≤",
            "price": 100,
            "unite": None,
            "bld": {
                "breakfast": False,
                "lunch": False,
                "dinner": False,
                "editable": False,
            },
        },
        {
            "name": "‡¶∏‡¶∞‡¶ø‡¶∑‡¶æ‡¶∞ ‡¶§‡ßá‡¶≤",
            "price": 80,
            "unite": "‡¶≤‡¶ø‡¶ü‡¶æ‡¶∞",
            "bld": {
                "breakfast": False,
                "lunch": True,
                "dinner": False,
                "editable": True,
            },
        },
        {
            "name": "‡¶™‡¶æ‡¶Æ ‡¶§‡ßá‡¶≤",
            "price": 90,
            "unite": "‡¶≤‡¶ø‡¶ü‡¶æ‡¶∞",
            "bld": {
                "breakfast": True,
                "lunch": True,
                "dinner": False,
                "editable": False,
            },
        },
        {
            "name": "‡¶ï‡ßã‡¶ï‡ßã‡¶®‡¶æ‡¶ü ‡¶§‡ßá‡¶≤",
            "price": 120,
            "unite": "‡¶≤‡¶ø‡¶ü‡¶æ‡¶∞",
            "bld": {
                "breakfast": False,
                "lunch": False,
                "dinner": True,
                "editable": True,
            },
        },
        {
            "name": "‡¶ò‡¶ø",
            "price": 200,
            "unite": "‡¶≤‡¶ø‡¶ü‡¶æ‡¶∞",
            "bld": {
                "breakfast": True,
                "lunch": False,
                "dinner": False,
                "editable": True,
            },
        },
        {
            "name": "‡¶¨‡¶æ‡¶ü‡¶æ‡¶∞",
            "price": 150,
            "unite": "‡¶≤‡¶ø‡¶ü‡¶æ‡¶∞",
            "bld": {
                "breakfast": False,
                "lunch": True,
                "dinner": True,
                "editable": False,
            },
        },
        {
            "name": "‡¶ö‡¶ø‡¶®‡¶ø",
            "price": 50,
            "unite": "‡¶ï‡ßá‡¶ú‡¶ø",
            "bld": {
                "breakfast": True,
                "lunch": True,
                "dinner": True,
                "editable": True,
            },
        },
        {
            "name": "‡¶≤‡¶¨‡¶£",
            "price": 20,
            "unite": "‡¶ï‡ßá‡¶ú‡¶ø",
            "bld": {
                "breakfast": False,
                "lunch": False,
                "dinner": False,
                "editable": False,
            },
        },
    ]

    category_id = "0a5bf0e4-0cb5-459c-88ca-4c9662bdc9fc"
    unite_id = "4bfdca59-59eb-478a-88ff-d36062ea1176"  # replace with real dynamic match if needed

    success_count = 0
    fail_count = 0

    with requests.Session() as session:
        for i, product in enumerate(products, 1):
            payload = {
                "name": product.get("name"),
                "price": str(product.get("price")),
                "unite_id": unite_id,
                "category_id": category_id,
            }

            try:
                response = session.post(post_url, json=payload, cookies=cookies)

                if response.status_code == 201:
                    print(f"[{i}/{len(products)}] ‚úÖ Uploaded: {product['name']}")
                    success_count += 1
                elif response.status_code == 400 and "already exists" in response.text:
                    print(f"[{i}/{len(products)}] ‚ö†Ô∏è Already exists: {product['name']}")
                else:
                    print(f"[{i}/{len(products)}] ‚ùå Failed: {product['name']}, Status: {response.status_code}")
                    print(f"   ‚Üí Error: {response.text}")
                    fail_count += 1

                sleep(0.2)

            except requests.exceptions.RequestException as e:
                print(f"[{i}/{len(products)}] ‚ùó Exception for {product['name']}: {e}")
                fail_count += 1

    print("\nUpload Summary:")
    print(f"‚úÖ Success: {success_count}")
    print(f"‚ùå Failed: {fail_count}")


if __name__ == '__main__':
    upload_product()
